;;; init.el --- emacs init file

;;; Commentary:

;;; Code:
;; (declare-function helm-make-source)


;; melpa
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (add-to-list
   'package-archives
   '("org" . "http://orgmode.org/elpa/")
   t)
  (package-initialize))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (xclip company-racer ob-rust x86-lookup racer flycheck-rust cargo rust-mode docker-compose-mode nasm-mode ob-go company-lua lua-mode org htmlize company-distel go-impl geiser company-erlang erlang flycheck-rebar3 company-go clang-format yaml-mode helm-go-package sr-speedbar helm-cscope go-eldoc go-snippets syslog-mode auto-save-buffers-enhanced helm-projectile company-c-headers company-irony company-irony-c-headers irony irony-eldoc go-guru company go-mode spice-mode indent-guide graphviz-dot-mode color-theme-solarized rainbow-delimiters unicode-fonts highlight-indent-guides virtualenvwrapper helm-flycheck py-autopep8 flycheck elpy markdown-mode helm use-package paredit systemtap-mode highlight-current-line window-numbering tabbar slime-company relative-line-numbers buttercup))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(electric-pair-mode 1)
(menu-bar-mode -1)
(set-face-foreground 'minibuffer-prompt "white")
(setq inhibit-startup-screen t)
(setq shell-file-name "/bin/bash")
(add-to-list 'default-frame-alist '(font . "Source Code Pro-13"))
(setq-default mode-line-format
	      '(
		"%e" mode-line-front-space
		(:eval (concat "No." (window-numbering-get-number-string)))
		" %l:%c  "
		mode-line-modified
		"  "
		default-directory
		"%b  "
		(vc-mode vc-mode)
		"  (%m)  "
		(which-func-mode ("" which-func-format " "))
		"%p"
		"(%I)"
		mode-line-end-spaces))

(define-key input-decode-map "\e[1;5A" [C-up])
(define-key input-decode-map "\e[1;5B" [C-down])
(define-key input-decode-map "\e[1;5C" [C-right])
(define-key input-decode-map "\e[1;5D" [C-left])
(define-key input-decode-map "\e[1;9A" [M-up])
(define-key input-decode-map "\e[1;9B" [M-down])
(define-key input-decode-map "\e[1;9C" [M-right])
(define-key input-decode-map "\e[1;9D" [M-left])
(define-key input-decode-map "\e[1;10A" [M-S-up])
(define-key input-decode-map "\e[1;10B" [M-S-down])
(define-key input-decode-map "\e[1;10C" [M-S-right])
(define-key input-decode-map "\e[1;10D" [M-S-left])

(xterm-mouse-mode t)
(global-set-key (kbd "<mouse-4>") (lambda ()
				    (interactive)
				    (scroll-down 1)))

(global-set-key (kbd "<mouse-5>") (lambda ()
				    (interactive)
				    (scroll-up 1)))
(setq mouse-drag-copy-region t)
(xclip-mode +1)

;; backup will be inhibited if the file was tracked by Version Control (eg: git)
(setq backup-file-dir (expand-file-name "~/.emacs_saves"))
(unless (file-exists-p backup-file-dir)
  (make-directory backup-file-dir))

(setq backup-by-copying t)
(setq backup-directory-alist `((".*" . ,backup-file-dir)))
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq version-control t)
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files backup-file-dir))
    (when
	(and (backup-file-name-p file)
	     (> (- current
		   (float-time (nth 5 (file-attributes file))))
		week))
      (message "%s" file)
      (delete-file file))))

(defface org-block-begin-line
  '((t (:foreground "00ffd7" :background "#5f0087")))
  "Face used for the line delimiting the begin of source blocks.")

(defface org-block-background
  '((t (:background "#878787")))
  "Face used for the source block background.")

(defface org-block-end-line
  '((t (:foreground "00ffd7" :background "#5f0087")))
  "Face used for the line delimiting the end of source blocks.")

;; (require 'color-theme)
(defvar use-custom-solarized-dark-p nil)
(require 'color-theme-solarized)
(require 'solarized-definitions)
(setq solarized-termcolors 256)
(if use-custom-solarized-dark-p
    (setq solarized-colors (remove (assoc 'base03 solarized-colors) solarized-colors)))
;; (add-to-list 'solarized-colors '(base03 "#002b36" "#042028" "#002b36" "brightblack" "black"))
(load-theme 'solarized t)
;; (setq solarized-degrade t)
;; (setq solarized-broken-srgb t)
(set-terminal-parameter nil 'background-mode 'dark)
(enable-theme 'solarized)

(defun comment-or-uncomment-line-or-region()
  "comment code"
  (interactive)
  (if (region-active-p)
      (comment-or-uncomment-region (region-beginning) (region-end))
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (next-logical-line))
(global-set-key (kbd "C-c ;") 'comment-or-uncomment-line-or-region)

(use-package autoinsert
  :config
  (auto-insert-mode)
  (setq auto-insert-directory (concat (expand-file-name user-emacs-directory) "file_template"))
  (setq auto-insert-query nil)
  ;; (add-to-list 'auto-insert-alist '(erlang-mode . "my-erlang-template.erl"))
  (add-to-list 'auto-insert-alist '(org-mode . "my-org-template.org"))
  (add-to-list 'auto-insert-alist '(python-mode . "my-python-template.py"))
  :init
  (advice-add 'auto-insert :around #'yasnippet-expand-after-auto-insert)
  :preface
  (defun yasnippet-expand-after-auto-insert (orig-fun &rest args)
    (let ((is-new-file (and (not buffer-read-only)
			    (or (eq this-command 'auto-insert)
				(and auto-insert (bobp) (eobp))))))
      (apply orig-fun args)
      (let ((old-point-max (point-max)))
	(when is-new-file
	  (goto-char old-point-max)
	  (yas/expand-snippet (buffer-substring-no-properties (point-min) (point-max)))
	  (delete-region (point-min) old-point-max))))))

(use-package which-func
  ;; :defer t
  ;; :init
  ;; (setq which-func-unknown " N/A ")
  ;; (which-function-mode)
  :config
  (setq which-func-unknown " N/A ")
  (set-face-background 'which-func "white")
  (set-face-foreground 'which-func "#0000ee")
  (which-function-mode 1))

(use-package linum-highlight-current-line-number
  :load-path "site-packages")

;; (use-package asm-mode
;;   :config
;;   (local-unset-key (vector asm-comment-char))
;;   (setq tab-always-indent (default-value 'tab-always-indent)))


;; (use-package nasm-mode
;;   :mode "\\.nasm"
;;   :init
;;   :bind (:map nasm-mode-map
;; 			  ("C-c h x" . #'x86-lookup)))

;; (use-package x86-lookup
;;   :config
;;   (setq x86-lookup-pdf "~/Documents/325383-sdm-vol-2abcd.pdf"))

;; (use-package bison-mode
;;   ;; :mode "\\.y\\'"
;;   :load-path "site-packages")

(use-package linum
  :config
  (linum-mode 1))

(use-package relative-line-numbers
  :defer t
  :ensure t
  :init
  (relative-line-numbers-mode 1)
  ;; (defvar -linum-type 1)
  ;; :bind (("C-x t" . switch-line-number))
  :config
  (global-relative-line-numbers-mode 0)
  (global-linum-mode t)
  (setq relative-line-numbers-format (lambda (offset)
				       (format " %03d " (abs offset))))
  (if use-custom-solarized-dark-p
      (progn
	(set-face-background 'relative-line-numbers "black")
	(set-face-background 'relative-line-numbers-current-line "black")
	(set-face-background 'linum "black"))
    (progn
      (set-face-background 'relative-line-numbers "#1c1c1c")
      (set-face-background 'relative-line-numbers-current-line "#1c1c1c")
      (set-face-background 'linum "#1c1c1c")))
  
  (set-face-foreground 'relative-line-numbers "#005f5f")
  (set-face-foreground 'relative-line-numbers-current-line "#bd3612")
  (set-face-foreground 'linum "#005f5f")
  ;; :preface
  ;; (defun switch-line-number ()
  ;;   "Switch line number mode
  ;; -linum-type:
  ;; 0 -> close
  ;; 1 -> relative
  ;; 2 -> absolute"
  ;;   (interactive)
  ;;   (setq -linum-type
  ;; 	  (mod (incf -linum-type) 3))
  ;;   (case (mod -linum-type 3)
  ;;     (0 (progn
  ;; 	   (global-relative-line-numbers-mode 0)
  ;; 	   (global-linum-mode 0)))
  ;;     (1 (progn
  ;; 	   (global-relative-line-numbers-mode t)
  ;; 	   (global-linum-mode 0)))
  ;;     (2 (progn
  ;; 	   (global-relative-line-numbers-mode 0)
  ;; 	   (global-linum-mode t)))))
  )

(use-package highlight-current-line
  ;; :defer t
  ;; :ensure t
  ;; :init
  ;; (global-hl-line-mode 1)
  :config
  (global-hl-line-mode 1)
  (set-face-attribute hl-line-face
		      nil
		      :background "black"))

(use-package window-numbering
  ;; :defer t
  :ensure t
  :config
  (window-numbering-mode 1))

(use-package paren
  ;; :defer t
  :ensure t
  ;; :init

  :config
  (show-paren-mode 1)
  (set-face-background 'show-paren-match "#00ff00")
  (set-face-foreground 'show-paren-match "#0000ff")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold))

(use-package tabbar
  ;; :defer t
  :ensure t
  :init
  ;; (tabbar-mode 1)

  :preface
  (defun ztl-modification-state-change ()
    (tabbar-set-template tabbar-current-tabset nil)
    (tabbar-display-update))
  (defun ztl-on-buffer-modification ()
    (set-buffer-modified-p t)
    (ztl-modification-state-change))
  :config
  (add-hook 'after-save-hook 'ztl-modification-state-change)
  (add-hook 'first-change-hook 'ztl-on-buffer-modification)
  (tabbar-mode 1)
  (setq tabbar-separator '(1.5))
  (advice-add 'tabbar-buffer-tab-label :filter-return
	      (lambda (return-val)
		(if (and (buffer-modified-p (tabbar-tab-value tab))
			 (buffer-file-name (tabbar-tab-value tab)))
		    (concat " + " (concat return-val " "))
		  (concat " " (concat return-val " ")))))
  (if (window-system)
      (set-face-attribute 'tabbar-default nil
			  :family "Source Code Pro"
			  :height 1
			  :underline nil)
    (if use-custom-solarized-dark-p
	(set-face-attribute 'tabbar-default nil
			    :underline nil)
      (set-face-attribute 'tabbar-default nil
			  :background "#1c1c1c"
			  :underline nil)))
  (set-face-attribute 'tabbar-selected nil
		      :background "white"
		      :foreground "#0000ee"
		      :underline nil)
  (set-face-attribute 'tabbar-selected-modified nil
		      :background "white"
		      :foreground "red")
  (set-face-attribute 'tabbar-button nil
		      :box '(:line-width 1 :color "#333333" :style nil)))

(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward))

(use-package auto-save-buffers-enhanced
  ;; :defer t
  :ensure t
  :config
  (auto-save-buffers-enhanced t))

(use-package unicad
  ;; :demand
  :load-path "site-packages")


(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (require 'helm-config)
  (setq helm-split-window-inside-p           t
	helm-semantic-fuzzy-match t
	helm-imenu-fuzzy-match t
	helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match t
	helm-move-to-line-cycle-in-source     t
	helm-ff-search-library-in-sexp t
	helm-ff-file-name-history-use-recentf t
	helm-M-x-fuzzy-match t
	helm-echo-input-in-header-line t
	helm-apropos-fuzzy-match t
	helm-scroll-amount                    8)
  :bind (("M-x" . helm-M-x)
	 ("C-s" . helm-occur)
	 ("M-y" . helm-show-kill-ring)
	 ("C-x b" . helm-mini)
	 ("C-x C-f" . helm-find-files)
	 ("C-h <SPC>" . helm-all-mark-rings)
	 ("C-c h" . helm-command-prefix))
  :bind (:map helm-command-map
	      ("TAB" . helm-execute-persistent-action)
	      ("p" . helm-projectile)
	      ("i" . helm-semantic-or-imenu)))

;; (use-package helm-elisp
;;   :requires helm
;;   :config
;;   (setq helm-apropos-fuzzy-match t))

;; (use-package helm-buffers
;;   :requires helm
;;   :config
;;   (setq helm-buffers-fuzzy-matching t))

;; (use-package helm-locate
;;   :requires helm
;;   :config
;;   (setq helm-locate-fuzzy-match t))

;; (use-package helm-for-files
;;   :requires helm
;;   :config
;;   (setq helm-recentf-fuzzy-match t))

;; (use-package helm-config
;;   :requires helm
;;   :bind (:map helm-command-map

;; ))

;; (use-package helm-files
;;   :requires helm
;;   :config
;;   (setq helm-ff-search-library-in-sexp t)
;;   (setq helm-ff-file-name-history-use-recentf t))

(use-package company
  ;; :defer t
  :ensure t
  :init
  (global-company-mode)
  :bind (:map company-active-map
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 2)
  (setq company-backends (remove 'company-clang company-backends))
  (setq company-backends (remove 'company-semantic company-backends))
  (setq company-backends (remove 'company-xcode company-backends)))

(use-package yasnippet
  ;; :defer t
  :ensure t
  :config
  (yas-global-mode 1))

(use-package company-yasnippet
  :defer t
  :config
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-yasnippet)))

;; (use-package company-go
;;   :ensure t
;;   :defer t
;;   :init
;;   (with-eval-after-load 'company
;;     (add-to-list 'company-backends 'company-go)
;; 	(setq company-begin-commands '(self-insert-command)))
;;   )

;; (eval-and-compile
;;   (defun go-flycheck-path ()
;;     (concat (getenv "GOPATH") "/src/github.com/dougm/goflymake")))
(use-package go-flycheck
  :defer t
  :load-path (lambda ()
	       (list (concat (getenv "GOPATH") "src/github.com/dougm/goflymake")))
  ;; :load-path (lambda () (list (go-flycheck-path)))
  :config
  (global-flycheck-mode 1)
  ;; :init (global-flycheck-mode)
  )

;; (use-package go-eldoc
;;   :ensure t
;;   :defer t
;;   :init
;;   (dolist (hook '(go-mode-hook))
;;     (add-hook hook 'go-eldoc-setup)))

;; (use-package go-projectile
;;   :defer t
;;   :ensure t
;;   ;; (setq helm-mode-no-completion-in-region-in-modes
;;   ;; 		'(circe-channel-mode
;;   ;; 		  circe-query-mode
;;   ;; 		  circe-server-mode))
;;   ;; :init
;;   ;; (eval-after-load 'go-mode
;;   ;; 	'(progn
;;   ;; 	   (go-projectile-set-gopath)
;;   ;; 	   (go-projectile-tools-add-path)))
;;   )

;; (use-package go-impl
;;   :ensure t
;;   :defer t
;;   :after (helm)
;;   :config
;;   (with-eval-after-load 'helm
;; 	(add-to-list 'helm-completing-read-handlers-alist '(go-impl . nil))))

(use-package go-mode
  :ensure t
  :defer t
  :init
  ;; (setq tab-width 4)
  :config
  (go-mode)
  (setq gofmt-command "goimports")
  (setq compile-command (concat "go build -v " buffer-file-name))
  ;; (setq tab-width 4)
  (setq indent-tabs-mode 1)
  (add-to-list 'company-backends 'company-go)
  (setq company-begin-commands '(self-insert-command))
  (go-eldoc-setup)
  :bind (:map go-mode-map
	      ("M-." . godef-jump)
	      ("M-," . pop-tag-mark)
	      ("C-c l" . gofmt)
	      ("C-c C-l" . gofmt)
	      ("C-c b" . compile)
	      ("C-c C-b" . compile)
	      ("C-c r" . go-run)
	      ("C-c C-r" . go-run)
	      ("C-c h o" . go-guru-helm)
	      ("C-c d" . godoc-at-point))
  :preface
  (defun go-run ()
    (interactive)
    (shell-command (concat "go run "
			   (read-shell-command "go run: " buffer-file-name))))
  (defun go-guru-helm ()
    (interactive)
    (helm :sources (helm-build-in-buffer-source "go-guru-helm"
		     :data '(go-guru-describe
			     go-guru-freevars
			     go-guru-implements
			     go-guru-peers
			     go-guru-referrers
			     go-guru-definition
			     go-guru-pointsto
			     go-guru-callstack
			     go-guru-whicherrs
			     go-guru-callers
			     go-guru-callees
			     go-guru-expand-region
			     go-guru-set-scope)
		     :action (lambda (candidate)
			       (funcall-interactively (intern candidate))))
	  :buffer "*go-guru command*")))

(use-package paredit
  :ensure t
  :defer t
  :hook ((emacs-lisp-mode lisp-mode scheme-mode) . paredit-mode)
  ;; :init
  ;; (dolist (hook '(emacs-lisp-mode-hook
  ;; 		  lisp-mode-hook
  ;; 		  scheme-mode-hook))
  ;;   (add-hook hook 'paredit-mode))
  
  ;; (dolist (mode '(erlang))
  ;; 	(add-hook (intern (format "%s-mode-hook" mode))
  ;; 			  '(lambda ()
  ;; 				 (add-to-list (make-local-variable 'paredit-space-for-delimiter-predicates)
  ;; 							  (lambda (_ _) nil))
  ;; 				 (enable-paredit-mode))))
  
  :bind (:map paredit-mode-map
	      ("C-<up>" . paredit-backward-slurp-sexp)
	      ("C-<down>" . paredit-backward-barf-sexp)))

;; (use-package geiser)

;; (use-package scheme-mode
;;   :mode "\\.sc\\'"
;;   :init
;;   (with-eval-after-load 'geiser
;;     (setq geiser-active-implementations '(mit))))


;; (use-package lisp-mode
;;   :defer t
;;   )

(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook ((emacs-lisp-mode lisp-mode erlang-mode scheme-mode) . rainbow-delimiters-mode)
  :init
  ;; (dolist (hook '(emacs-lisp-mode-hook
  ;; 		  lisp-mode-hook
  ;; 		  erlang-mode-hook
  ;; 		  scheme-mode-hook))
  ;;   (add-hook hook 'rainbow-delimiters-mode))
  )

;; (use-package slime
;;   :ensure t
;;   :defer t
;;   :commands (slime)
;;   :init
;;   (setq slime-contribs '(slime-fancy))
;;   ;; (setq inferior-lisp-program "/usr/bin/sbcl")
;;   (setq slime-lisp-implementations 
;; 	`((sbcl
;; 	   ("/usr/bin/sbcl"
;; 	    "--core" ,(expand-file-name "~/.slime/sbcl.core-with-swank")
;; 	    "--sysinit" ,(expand-file-name "sbclrc" user-emacs-directory))
;; 	   :init (lambda (port-file _)
;; 		   (format "(swank:start-server %S)\n" port-file)))
;; 	  ;; (clisp
;; 	  ;;  ("/usr/local/bin/clisp"
;; 	  ;;   "-i" ,(concat user-emacs-directory "clisprc"))
;; 	  ;;  :coding-system utf-8-unix)))
;; 	  ;; (setq common-lisp-hyperspec-root
;; 	  ;; 	(concat "file://"
;; 	  ;; 		(expand-file-name user-emacs-directory) "HyperSpec/"))
;; 	  (slime-setup '(slime-fancy slime-company))
;; 	  (advice-add 'slime :around #'split-window-around-slime)
;; 	  :preface
;; 	  (defun split-window-around-slime (orig-fun &rest args)
;; 	    (let ((lisp-buffer (current-buffer))
;; 		  (lisp-win (selected-window)))
;; 	      (split-window nil nil 'right)
;; 	      (apply orig-fun args)
;; 	      (select-window lisp-win)
;; 	      (set-buffer lisp-buffer))))))

;; (use-package slime-repl
;;   :defer t
;;   :config
;;   (add-hook 'slime-repl-mode-hook
;; 	    (lambda ()
;; 	      (paredit-mode +1)
;; 	      (define-key slime-repl-mode-map
;; 		(read-kbd-macro
;; 		 paredit-backward-delete-key) nil))))

(use-package elisp-mode
  :defer t
  :config
  (add-to-list 'company-backends 'company-elisp)
  ;; :config
  ;; (add-hook 'elisp-mode-hook (lambda ()
  ;; 							   (add-to-list 'company-backends 'company-elisp)))
  )

;; (use-package lua-mode
;;   :defer t
;;   :init
;;   (with-eval-after-load 'company
;; 	(add-to-list 'company-backends 'company-lua))
;;   :config
;;   (setq lua-default-application "/usr/local/openresty/luajit/bin/luajit")
;;   )

(use-package erlang
  :defer t
  :bind (:map erlang-mode-map
	      ("C-c l" . erlang-indent-current-buffer)
	      ("C-c h o" . erlang-tempo-helm))
  ;; :config
  ;; (add-hook 'erlang-mode-hook (lambda ()
  ;; 								(add-to-list 'company-backends 'company-erlang)
  ;; 								;; (add-to-list 'company-backends 'company-distel)
  ;; 								(company-erlang-init)
  ;; 								(ivy-erlang-complete-init)
  ;; 								))
  :config
  (setq inferior-erlang-machine-options '("-sname" "emacs"))
  (add-to-list 'company-backends 'company-erlang)
  ;; (add-to-list 'company-backends 'company-distel)
  (company-erlang-init)
  (ivy-erlang-complete-init)
  :preface
  (defun erlang-tempo-helm ()
    (interactive)
    (helm :sources (helm-build-in-buffer-source "erlang-tempo-helm"
		     :data '(tempo-template-erlang-if
			     tempo-template-erlang-loop
			     tempo-template-erlang-spec
			     tempo-template-erlang-case
			     tempo-template-erlang-after
			     tempo-template-erlang-author
			     tempo-template-erlang-module
			     tempo-template-erlang-receive
			     tempo-template-erlang-gen-lib
			     tempo-template-erlang-gen-fsm
			     tempo-template-erlang-function
			     tempo-template-erlang-gen-event
			     tempo-template-erlang-wx-object
			     tempo-template-erlang-supervisor
			     tempo-template-erlang-application
			     tempo-template-erlang-gen-corba-cb
			     tempo-template-erlang-large-header
			     tempo-template-erlang-small-server
			     tempo-template-erlang-small-header
			     tempo-template-erlang-ts-test-suite
			     tempo-template-erlang-normal-header
			     tempo-template-erlang-generic-server
			     tempo-template-erlang-ct-test-suite-l
			     tempo-template-erlang-ct-test-suite-s
			     tempo-template-erlang-supervisor-bridge
			     tempo-template-erlang-gen-statem-StateName
			     tempo-template-erlang-gen-statem-handle-event)
		     :action (lambda (candidate)
			       (funcall-interactively (intern candidate))))
	  :buffer "*erlang-tempo command")))


;; (use-package distel
;;   :load-path "/usr/local/share/distel/elisp"
;;   :config
;;   (distel-setup))

;; (use-package company-distel
;;   :defer t
;;   :init
;;   (with-eval-after-load 'company
;; 	(add-to-list 'company-backends 'company-distel))
;;   (setq company-distel-popup-help t)
;;   (setq company-distel-popup-height 30)
;;   (setq distel-completion-get-doc-from-internet t))

(use-package elpy
  :ensure t
  :defer t
  :commands (elpy-mode)
  :config
  (setq elpy-rpc-backend "jedi")
  (setq elpy-rpc-python-command "python3")

  (setq python-shell-interpreter "ipython")
  ;; (setq elpy-shell-interpreter "python3")
  (setq python-shell-interpreter-args "--simple-prompt --pprint")
  (elpy-enable)
  (unbind-key "C-c C-r f" elpy-mode-map)
  :bind (:map elpy-mode-map
	      ("C-c l" . elpy-format-code)
	      ("C-c C-l" . elpy-format-code)))

;; (use-package xcscope
;;   :load-path "site-packages"
;;   :demand t
;;   )

;; (use-package irony-eldoc
;;   :ensure t
;;   :defer t
;;   :init

;;   )

;; (use-package irony
;;   :ensure t
;;   :defer t
;;   :config
;;   (add-to-list 'irony-supported-major-modes 'cc-mode)
;;   (add-to-list 'irony-supported-major-modes 'bison-mode)
;;   :init
;;   (add-hook 'irony-mode-hook 'irony-eldoc)
;;   ;; (if (equal system-type "gnu/linux")
;;   ;; (dolist (hook '(cc-mode-hook
;;   ;; 				  c-mode-hook
;;   ;; 				  c++-mode-hook))
;;   ;; 	(add-hook hook 'irony-mode))
;;   ;; )
;;   (setq irony--compile-options '("-std=c++11"))
;;   :config
;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

;; ;; (use-package company-irony
;; ;;   :ensure t
;; ;;   :defer t
;; ;;   :init
;; ;;   ;; (setq company-clang-arguments (append company-clang-arguments '("-I/usr/include/**")))
;; ;;   (with-eval-after-load 'company
;; ;;     (add-to-list 'company-backends 'company-irony))
;; ;;   )

;; (use-package company-c-headers
;;   :ensure t
;;   :defer t
;;   :config
;;   (add-to-list 'company-c-headers-path-system "/usr/include/c++/6")
;;   ;; :init
;;   ;; (with-eval-after-load 'company
;;   ;; 	(add-to-list 'company-backends 'company-c-headers))
;;   )


;; ;; (use-package company-irony-c-headers
;; ;;   :ensure t
;; ;;   :defer t
;; ;;   ;; :demand t
;; ;;   :init
;; ;;   (with-eval-after-load 'company
;; ;;     (add-to-list 'company-backends 'company-irony-c-headers)))

;; (use-package cc-mode
;;   :defer t
;;   :init
;;   (setq compile-command "make")
;;   (dolist (hook '(cc-mode-hook
;; 		  c-mode-hook
;; 		  c++-mode-hook))
;;     (add-hook hook 'irony-mode)
;;     (add-hook hook (lambda ()
;; 		     (add-to-list 'company-backends 'company-c-headers)
;; 		     (add-to-list 'company-backends 'company-irony)
;; 		     (irony-mode)
;; 		     ))
;;     )
;;   ;; (require 'xcscope)
;;   :bind (:map c++-mode-map
;; 	      ("C-c h s" . helm-cscope-command)
;; 	      ("C-c l" . clang-format-buffer))
;;   :bind (:map c-mode-map
;; 	      ("C-c h s" . helm-cscope-command)
;; 	      ("C-c l" . clang-format-buffer))
;;   :preface
;;   (defun helm-cscope-command ()
;;     (interactive)
;;     (helm :sources (helm-build-in-buffer-source "helm-cscope-source"
;; 		     :data '(helm-cscope-find-this-symbol
;; 			     helm-cscope-find-global-definition
;; 			     helm-cscope-find-called-function
;; 			     helm-cscope-find-calling-this-function
;; 			     helm-cscope-find-this-text-string
;; 			     helm-cscope-find-egrep-pattern
;; 			     helm-cscope-find-this-file
;; 			     helm-cscope-find-files-including-file
;; 			     helm-cscope-find-assignments-to-this-symbol)
;; 		     :action (lambda (candidate)
;; 			       (call-interactively (intern candidate))))
;; 	  :buffer "*helm-cscope command*")))


(use-package dockerfile-mode
  :defer t
  :mode "Dockerfile\\'")

;; (use-package rust-mode
;;   :defer t
;;   :mode "\\.rs"
;;   :bind (:map rust-mode-map
;; 			  ("C-c l" . rust-format-buffer)
;; 			  ("C-c C-l" . rust-format-buffer)
;; 			  ("TAB" . company-indent-or-complete-common))
;;   :init
;;   (with-eval-after-load 'company
;;   	(setq company-tooltip-align-annotations t)
;; 	(setq company-backends (delete 'company-yasnippet company-backends)))

;;   (setq racer-cmd "~/.cargo/bin/racer")
;;   (setq racer-rust-src-path (expand-file-name (getenv "RUST_SRC_PATH")))
;;   (add-hook 'rust-mode-hook #'racer-mode)
;;   (add-hook 'racer-mode-hook #'eldoc-mode)
;;   (add-hook 'racer-mode-hook #'company-mode)
;;   (add-hook 'rust-mode-hook 'cargo-minor-mode)
;;   (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))


;; (src-package weechat
;;   :defer t
;;   ;; :init
;;   ;; :configlY
;;   ;; (unload-feature 'weechat-notifications)
;;   )

(use-package org
  :defer t
  :init
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-startup-truncated nil)
  (setq org-html-validation-link nil)
  (setq org-html-htmlize-output-type 'css)
  :preface
  ;; (defun ob/display-images ()
  ;; 	(condition-case nil
  ;; 		(org-display-inline-images)
  ;; 	  (error nil)))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((sh . t)
				 (python . t)
				 (erlang . t)
				 (C . t)
				 (dot . t)
				 (lisp . t)
				 (ditaa . t)
				 (go . t)
				 (matlab . t)))
  (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
  ;; (add-hook 'org-babel-after-execute-hook 'ob/display-images' 'append)
  (set-face-foreground 'org-meta-line "#585858")
  (set-face-foreground 'org-block "#bcbcbc")
  (set-face-foreground 'org-document-info-keyword "#585858")
  (set-face-foreground 'org-document-info "#585858")
  (set-face-foreground 'org-document-title "white")
  (set-face-foreground 'org-table "#00afd7")
  (set-face-foreground 'org-code "#00af5f")
  ;; (setq org-publish-project-alist
  ;; 		'(
  ;; 		  ("html"
  ;; 		   :publishing-directory "~/Documents/ORG-DOCUMENTS/exports/html")
  ;; 		  ))
  (add-to-list 'org-structure-template-alist
	       '("cpp" "#+header: :results output\n#+header: :exports both\n#+header: :tangle no\n#+header: :flags -std=c++17 -Isrc\n#+header: :includes \n#+header: :namespaces std\n#+header: :main no\n#+BEGIN_SRC C++ -r -l \"//\(ref:%s\)\"\n?\n#+END_SRC" ""))
  :bind (("C-c o" . org-open-at-point)))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  ;; (add-to-list)
  (setq markdown-css-paths '("/home/xfwduke/Documents/github-markdown.css"))
  (setq markdown-xhtml-body-preamble "<article class='markdown-body'>")
  (setq markdown-xhtml-body-epilogue "</article>")
  
  (setq markdown-xhtml-header-content "
<style>
	.markdown-body {
  		box-sizing: border-box;
  		min-width: 200px;
  		max-width: 980px;
  		margin: 0 auto;
  		padding: 45px;
  	}

  	@media (max-width: 767px) {
  		.markdown-body {
  			padding: 15px;
  		}
  	}
</style>
")
  )

;; (use-package gdb-mi
;;   :defer t
;;   :config
;;   (advice-add 'gdb-setup-windows :after #'my-gdb-layout)
;;   (gdb-many-windows)
;;   :preface
;;   (defun my-gdb-layout (&rest args)
;;     (interactive)
;;     (gdb-get-buffer-create 'gdb-locals-buffer)
;;     (gdb-get-buffer-create 'gdb-stack-buffer)
;;     (gdb-get-buffer-create 'gdb-disassembly-buffer)
;;     (gdb-get-buffer-create 'gdb-inferior-io)
;;     (gdb-get-buffer-create 'gdb-breakpoints-buffer)
;;     (set-window-dedicated-p (selected-window) nil)
;;     (switch-to-buffer gud-comint-buffer)
;;     (delete-other-windows)
;;     (let ((win0 (selected-window))
;; 	  (win1 (split-window-below (/ (* (window-height) 2) 3)))
;; 	  (win2 (split-window-right (/ (* (window-width) 2) 3)))
;; 	  (win3 (split-window-right)))
      
;;       (gdb-set-window-buffer (gdb-locals-buffer-name) nil win2)

;;       (gdb-set-window-buffer (gdb-disassembly-buffer-name) nil win3)
;;       (set-window-buffer
;;        win0
;;        (if gud-last-last-frame
;; 	   (gud-find-file (car gud-last-last-frame))
;; 	 (if gdb-main-file
;; 	     (gud-find-file gdb-main-file)
;; 	   (list-buffers-noselect))))
;;       (setq gdb-source-window (selected-window))
      
;;       (select-window win2)
;;       (let ((win6 (split-window-below (/ (* (window-height) 2) 3))))
;; 	(gdb-set-window-buffer (gdb-breakpoints-buffer-name) nil win6))
      
;;       (select-window win1)
;;       (let ((win4 (split-window-right (/ (* (window-width) 2) 3))))
;; 	(gdb-set-window-buffer (gdb-stack-buffer-name) nil win4)
;; 	(let ((win5 (split-window win4)))
;; 	  (gdb-set-window-buffer
;; 	   (gdb-get-buffer-create 'gdb-inferior-io) nil win5))))))


(provide 'init)
;;;
